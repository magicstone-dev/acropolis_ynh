#!/bin/bash

#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source _common.sh
source ynh_add_swap
source /usr/share/yunohost/helpers

#=================================================
# INSTALL DEPENDENCIES
#=================================================
ynh_script_progression "Installing Ruby..."

ynh_ruby_install

#=================================================
# ADD SWAP IF NEEDED
#=================================================
ynh_script_progression "Adding swap if needed..."

total_memory=$(ynh_get_ram --total)
swap_needed=0

if (( MEMORY_NEEDED > total_memory )); then
    # Need a minimum of 2.5Go of memory
    swap_needed=$((MEMORY_NEEDED - total_memory))
fi

ynh_script_progression "Adding $swap_needed Mo to swap..."
ynh_add_swap --size=$swap_needed

#=================================================
# CREATE A POSTGRESQL DATABASE
#=================================================
ynh_script_progression "Setting the PostgreSQL database..."

ynh_psql_db_shell <<< "CREATE EXTENSION IF NOT EXISTS hstore;"

ynh_psql_db_shell <<< "CREATE EXTENSION IF NOT EXISTS pg_trgm;"

#=================================================
# DOWNLOAD, CHECK AND UNPACK SOURCE
#=================================================
ynh_script_progression "Setting up source files..."

ynh_setup_source --dest_dir="$install_dir"

mkdir -p "$install_dir/tmp/pids"

#REMOVEME? Assuming the install dir is setup using ynh_setup_source, the proper chmod/chowns are now already applied and it shouldn't be necessary to tweak perms | chmod -R o-rwx "$install_dir"
#REMOVEME? Assuming the install dir is setup using ynh_setup_source, the proper chmod/chowns are now already applied and it shouldn't be necessary to tweak perms | chown -R "$app:www-data" "$install_dir"
#=================================================
# ADD A CONFIGURATION
#=================================================
ynh_script_progression "Adding $app's configuration..."

ynh_config_add --template="database.yml.example" --destination="$install_dir/config/database.yml"
ynh_config_add --template="diaspora.toml.example" --destination="$install_dir/config/diaspora.toml"

#REMOVEME? Assuming the file is setup using ynh_config_add, the proper chmod/chowns are now already applied and it shouldn't be necessary to tweak perms | chmod 400 "$install_dir/config/database.yml"
#REMOVEME? Assuming the file is setup using ynh_config_add, the proper chmod/chowns are now already applied and it shouldn't be necessary to tweak perms | chmod 400 "$install_dir/config/diaspora.toml"
#REMOVEME? Assuming the file is setup using ynh_config_add, the proper chmod/chowns are now already applied and it shouldn't be necessary to tweak perms | chown "$app:$app" "$install_dir/config/database.yml"
#REMOVEME? Assuming the file is setup using ynh_config_add, the proper chmod/chowns are now already applied and it shouldn't be necessary to tweak perms | chown "$app:$app" "$install_dir/config/diaspora.toml"

#=================================================
# INSTALLING RUBY AND BUNDLER
#=================================================
ynh_script_progression "Building $app..."

pushd "$install_dir"

    gem install bundler:1.17.3 --no-document
    ynh_exec_as_app echo "gem: --no-ri --no-rdoc" >> "$install_dir/.gemrc"
    ynh_exec_as_app chmod +x script/server

    ynh_hide_warnings ynh_exec_as_app ruby_load_path" script/configure_bundler
    ynh_hide_warnings ynh_exec_as_app ruby_load_path" bin/bundle config set path 'vendor/bundle'
    ynh_hide_warnings ynh_exec_as_app ruby_load_path" bin/bundle install --full-index --with postgresql
popd

ynh_script_progression "Preparing the database and create initial admin user..."

pushd "$install_dir"
    ynh_hide_warnings ynh_exec_as_app ruby_load_path" RAILS_ENV=production bin/rake db:migrate
    ynh_hide_warnings ynh_exec_as_app ruby_load_path" RAILS_ENV=production bin/rake assets:precompile
    ynh_hide_warnings ynh_exec_as_app ruby_load_path" RAILS_ENV=production bin/rake "admin:create[$admin, $email, $password]"
popd

#=================================================
# SYSTEM CONFIGURATION
#=================================================
ynh_script_progression "Adding system configurations related to $app..."

ynh_config_add_nginx

ynh_config_add_systemd --service="$app-web" --template="$app-web.service"
yunohost service add "$app-web" --description="$app web service"

ynh_config_add_systemd --service="$app-sidekiq" --template="$app-sidekiq.service"
yunohost service add "$app-sidekiq" --description="$app sidekiq service"

# Use logrotate to manage application logfile(s)
ynh_config_add_logrotate

#=================================================
# START SYSTEMD SERVICE
#=================================================
ynh_script_progression "Starting $app's systemd service..."

ynh_systemctl --service="${app}-web" --action="start" --log_path=systemd --wait_until="listening on"
ynh_systemctl --service="${app}-sidekiq" --action="start" --log_path=systemd --wait_until="Booted Rails"

#=================================================
# END OF SCRIPT
#=================================================

ynh_script_progression "Installation of $app completed"
